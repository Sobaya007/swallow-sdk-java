package org.tokyotech.trap.swallow;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import android.util.Base64;

/*
 * テスト用実装
 * find***系の検索機能は使えません！
 */
public class SwallowTest implements Swallow {
	/*
	 * ダミーデータ　ここから
	 */
	private long dummyTime = System.currentTimeMillis() - 12 * 60 * 60 * 1000;
	private long getDummyTime() {
		return dummyTime += 123 * 1000;
	};
	
	private ArrayList<Swallow.User> dummyUser = new ArrayList<Swallow.User>(Arrays.asList(new Swallow.User[]{
		new Swallow.User(1, getDummyTime(), "trap", "画像がある人", 1),
		new Swallow.User(2, getDummyTime(), "titech", "ない人", null),
		new Swallow.User(3, getDummyTime(), "n", "test", 2),
		new Swallow.User(4, getDummyTime(), "longnamelongname", "名前最大長(16文字)", 3),
		new Swallow.User(5, getDummyTime(), "me", "テストユーザ", null),
	}));
	private ArrayList<Swallow.Message> dummyMessage = new ArrayList<Swallow.Message>(Arrays.asList(new Swallow.Message[]{
		new Swallow.Message(1, getDummyTime(), 1, "普通の投稿", 0, null, null, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(2, getDummyTime(), 2, "改行\nが\n入った\n投稿", 0, null, null, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(3, getDummyTime(), 3, "ふぁぼられた投稿", 10, null, null, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(4, getDummyTime(), 4, "編集された投稿", 0, new String[]{"edited"}, null, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(5, getDummyTime(), 1, null, 0, new String[]{"deleted"}, null, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(6, getDummyTime(), 2, "既読確認付き投稿", 0, new String[]{"check"}, null, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(7, getDummyTime(), 3, "属性が複数ついた投稿", 0, new String[]{"edited", "check"}, null, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(8, getDummyTime(), 4, "クライアントが定義した属性付き投稿", 0, new String[]{"sample-attr"}, null, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(9, getDummyTime(), 1, "ファイル付き投稿", 0, null, new Integer[]{ 4 }, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(10, getDummyTime(), 2, "ファイル複数付き投稿", 0, null, new Integer[]{ 5, 6 }, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(11, getDummyTime(), 3, "フォルダ付き投稿", 0, null, new Integer[]{ 7 }, new Integer[]{ 1 }, null, null, null),
		new Swallow.Message(12, getDummyTime(), 4, "タグ複数付き投稿", 0, null, null, new Integer[]{ 1, 2 }, null, null, null),
		new Swallow.Message(13, getDummyTime(), 1, "タグなし投稿", 0, null, null, null, null, null, null),
		new Swallow.Message(14, getDummyTime(), 2, "ある投稿への返信", 0, null, null, new Integer[]{ 1 }, new Integer[]{ 1 }, null, null),
		new Swallow.Message(15, getDummyTime(), 3, "ユーザ宛投稿", 0, null, null, new Integer[]{ 1 }, null, new Integer[]{ 1 }, null),
		new Swallow.Message(16, getDummyTime(), 4, "アンケート付き投稿", 0, null, null, new Integer[]{ 1 }, null, null, new String[]{"選択肢A", "選択肢B"}),
		new Swallow.Message(17, getDummyTime(), 1, "JPG（解像度低め）つき投稿", 0, null, new Integer[]{ 8 }, new Integer[]{ 4 }, null, null, null),
		new Swallow.Message(18, getDummyTime(), 2, "PNG（透過）つき投稿", 0, null, new Integer[]{ 9 }, new Integer[]{ 4 }, null, null, null)
	}));
	private ArrayList<Swallow.File> dummyFile = new ArrayList<Swallow.File>(Arrays.asList(new Swallow.File[]{
		new Swallow.File(1, getDummyTime(), "profile1.jpg", "image/jpeg", null, null),
		new Swallow.File(2, getDummyTime(), "profile2.jpg", "image/jpeg", null, null),
		new Swallow.File(3, getDummyTime(), "aaaa.jpg", "image/jpeg", null, null),
		new Swallow.File(4, getDummyTime(), "test.pdf", "application/pdf", new Integer[]{ 1 }, null),
		new Swallow.File(5, getDummyTime(), "sample.zip", "application/zip", new Integer[]{ 1 }, null),
		new Swallow.File(6, getDummyTime(), "テキスト.txt", "text/plain", new Integer[]{ 1 }, null),
		new Swallow.File(7, getDummyTime(), "サンプルフォルダ", "swallow/folder", new Integer[]{ 1 }, new Integer[]{ 1, 2, 3 }),
		new Swallow.File(8, getDummyTime(), "myPicture.jpg", "image/jpeg", new Integer[]{ 4 }, null),
		new Swallow.File(9, getDummyTime(), "transparent.png", "image/png", new Integer[]{ 4 }, null)
	}));
	private ArrayList<Swallow.Tag> dummyTag = new ArrayList<Swallow.Tag>(Arrays.asList(new Swallow.Tag[]{
		new Swallow.Tag(1, getDummyTime(), "サンプル", 16),
		new Swallow.Tag(2, getDummyTime(), "tesuto", 1),
		new Swallow.Tag(3, getDummyTime(), "あああ", 0),
		new Swallow.Tag(4, getDummyTime(), "New", 2)
	}));
	private ArrayList<Swallow.Favorite> dummyFavorite = new ArrayList<Swallow.Favorite>(Arrays.asList(new Swallow.Favorite[]{
		new Swallow.Favorite(1, 3, getDummyTime(), 1),
		new Swallow.Favorite(2, 3, getDummyTime(), 2),
		new Swallow.Favorite(3, 3, getDummyTime(), 3),
		new Swallow.Favorite(4, 3, getDummyTime(), 4)
	}));
	private ArrayList<Swallow.Answer> dummyAnswer = new ArrayList<Swallow.Answer>(Arrays.asList(new Swallow.Answer[]{
		new Swallow.Answer(1, 16, getDummyTime(), "選択肢A"),
		new Swallow.Answer(2, 16, getDummyTime(), null), //まだ回答していない！
		new Swallow.Answer(3, 16, getDummyTime(), "選択肢A"),
		new Swallow.Answer(4, 16, getDummyTime(), "選択肢B"),
		new Swallow.Answer(5, 16, getDummyTime(), null) //まだ回答していない！
	}));
	private ArrayList<Swallow.Received> dummyReceived = new ArrayList<Swallow.Received>(Arrays.asList(new Swallow.Received[]{
		new Swallow.Received(1, 6, getDummyTime()),
		new Swallow.Received(2, 6, getDummyTime()),
		new Swallow.Received(3, 6, getDummyTime()),
		new Swallow.Received(4, 6, null), //まだ読んでない！
		new Swallow.Received(5, 6, null) //まだ読んでない！
	}));
	
	private HashMap<Integer, byte[]> fileEntity = new HashMap<Integer, byte[]>();
	public SwallowTest() {
		fileEntity.put(1, Base64.decode("/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAP//////////////////////////////////////////////////////////////////////////////////////2wBDAf//////////////////////////////////////////////////////////////////////////////////////wgARCACAAIADAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAH/xAAWAQEBAQAAAAAAAAAAAAAAAAAAAQL/2gAMAwEAAhADEAAAAZNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/xAAUEAEAAAAAAAAAAAAAAAAAAACA/9oACAEBAAEFAgB//8QAFBEBAAAAAAAAAAAAAAAAAAAAgP/aAAgBAwEBPwEAf//EABQRAQAAAAAAAAAAAAAAAAAAAID/2gAIAQIBAT8BAH//xAAUEAEAAAAAAAAAAAAAAAAAAACA/9oACAEBAAY/AgB//8QAFBABAAAAAAAAAAAAAAAAAAAAgP/aAAgBAQABPyEAf//aAAwDAQACAAMAAAAQSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS/8QAFBEBAAAAAAAAAAAAAAAAAAAAgP/aAAgBAwEBPxAAf//EABQRAQAAAAAAAAAAAAAAAAAAAID/2gAIAQIBAT8QAH//xAAUEAEAAAAAAAAAAAAAAAAAAACA/9oACAEBAAE/EAB//9k=", Base64.DEFAULT));
		fileEntity.put(2, Base64.decode("/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAP//////////////////////////////////////////////////////////////////////////////////////2wBDAf//////////////////////////////////////////////////////////////////////////////////////wgARCACAAIADAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAAAP/EABUBAQEAAAAAAAAAAAAAAAAAAAAC/9oADAMBAAIQAxAAAAFMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/8QAFBABAAAAAAAAAAAAAAAAAAAAgP/aAAgBAQABBQIAf//EABQRAQAAAAAAAAAAAAAAAAAAAID/2gAIAQMBAT8BAH//xAAUEQEAAAAAAAAAAAAAAAAAAACA/9oACAECAQE/AQB//8QAFBABAAAAAAAAAAAAAAAAAAAAgP/aAAgBAQAGPwIAf//EABQQAQAAAAAAAAAAAAAAAAAAAID/2gAIAQEAAT8hAH//2gAMAwEAAgADAAAAEP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP/EABQRAQAAAAAAAAAAAAAAAAAAAID/2gAIAQMBAT8QAH//xAAUEQEAAAAAAAAAAAAAAAAAAACA/9oACAECAQE/EAB//8QAFBABAAAAAAAAAAAAAAAAAAAAgP/aAAgBAQABPxAAf//Z", Base64.DEFAULT));
		fileEntity.put(3, Base64.decode("/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAP//////////////////////////////////////////////////////////////////////////////////////2wBDAf//////////////////////////////////////////////////////////////////////////////////////wgARCACAAIADAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAL/xAAWAQEBAQAAAAAAAAAAAAAAAAAAAQL/2gAMAwEAAhADEAAAAZ1AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//8QAFBABAAAAAAAAAAAAAAAAAAAAgP/aAAgBAQABBQIAf//EABQRAQAAAAAAAAAAAAAAAAAAAID/2gAIAQMBAT8BAH//xAAUEQEAAAAAAAAAAAAAAAAAAACA/9oACAECAQE/AQB//8QAFBABAAAAAAAAAAAAAAAAAAAAgP/aAAgBAQAGPwIAf//EABQQAQAAAAAAAAAAAAAAAAAAAID/2gAIAQEAAT8hAH//2gAMAwEAAgADAAAAELbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbf/EABQRAQAAAAAAAAAAAAAAAAAAAID/2gAIAQMBAT8QAH//xAAUEQEAAAAAAAAAAAAAAAAAAACA/9oACAECAQE/EAB//8QAFBABAAAAAAAAAAAAAAAAAAAAgP/aAAgBAQABPxAAf//Z", Base64.DEFAULT));
		fileEntity.put(4, Base64.decode("", Base64.DEFAULT));
		fileEntity.put(5, Base64.decode("UEsDBAoAAAAIAMWKo0ZJGQqCtQAAAOQCAAAFAAAAYS5qcGf7f+P/AwYBLzdPNwZGRkYGDyBk+P+PQdi5KDWxJDVFoTyzJEPB3dM34P9tBmeG/5QCoCGMFBtyiEGQg6GBoYGZUZCBSZCRWZDx/xEGUaD7GVABSFiMkRFdnJHp/y0GHmZGBiYBZgEgd7IDA20B0BkiAuiOawA6ggPoNEZWJoZ6kApB7CqYGRntGfGqYEKowGkLmz0TARWM9opAFdCAYWAGygh4qkyiKSLgawGCvhYg6CeQipsAUEsDBAoAAAAIANKKo0a65LrrrwAAAEIDAAAFAAAAYi5qcGfVkD0KwkAQhd/bRUlhsYvax5OkCEQjCl5BMKCtBCzds4mH8KfxJI67IIhBkyJY+Kab+Zh58+QkN5hplmcgiYkvyB39dFssy2IV7zblOh7n84VckULayi9h6yUH2AgOTtNCWWpLOWIAoiLfHYan3qXkgp4mlNEG4Mzhp9LBm6macN5E5K2xo7APhP1MaDJhLaFexNcr3UQ1EExGnngGA+0nRvDnVZ+qaUzVNGYWiPMDUEsDBAoAAAAIANqKo0ZrXHL9tQAAAOUCAAAFAAAAYy5qcGf7f+P/AwYBLzdPNwZGRkYGDyBk+P+PQdi5KDWxJDVFoTyzJEPB3dM34P9tBmeG/5QCoCGMFBtyiEGQg6GBoYGZUZCBSZCRWZDx/xEGUaD7GVABE1BYjJERXZyR6f8tBh5mRgYmAWYBIHeuAwNtQT3QHSIC6K5rALqCA+g2RlYmiApB7CqYGRntGfGqYEKowGkLmz0TIXfYKwJVQEOGgRkoI7Dtdi5NEQFfCxD0tQBBP4FU3AQAUEsBAgoACgAAAAgAxYqjRkkZCoK1AAAA5AIAAAUAAAAAAAAAAAAgAAAAAAAAAGEuanBnUEsBAgoACgAAAAgA0oqjRrrkuuuvAAAAQgMAAAUAAAAAAAAAAAAgAAAA2AAAAGIuanBnUEsBAgoACgAAAAgA2oqjRmtccv21AAAA5QIAAAUAAAAAAAAAAAAgAAAAqgEAAGMuanBnUEsFBgAAAAADAAMAmQAAAIICAAAAAA==", Base64.DEFAULT));
		fileEntity.put(6, Base64.decode("c2FubnB1cnU=", Base64.DEFAULT));
		fileEntity.put(7, null);
		fileEntity.put(8, Base64.decode("", Base64.DEFAULT));
		fileEntity.put(9, Base64.decode("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", Base64.DEFAULT));
	}
	/*
	 * ダミーデータ　ここまで
	 */

	@Override
	public User[] findUser(Integer startIndex, Integer endIndex, Long fromTime,
			Long toTime, Integer[] userIDs, String userNamePattern,
			String profilePattern, Boolean hasImage) {
		return dummyUser.toArray(new User[0]);
	}

	@Override
	public User modifyUser(String userName, String profile,
			Integer imageFileID, String password, String email, String web,
			String twitter, String gcm, String apns, Integer[] observeTagIDs,
			Boolean observeMention) {
		ArrayList<Swallow.User> list = new ArrayList<Swallow.User>();
		
		Swallow.UserDetail det = null;
		for (Swallow.User entry : dummyUser) {
			if (entry.getUserID() == 5) {
				list.add(new Swallow.User(entry.getUserID(), System
						.currentTimeMillis(), userName != null ? userName
						: entry.getUserName(), profile != null ? profile
						: entry.getProfile(), imageFileID != null ? imageFileID
						: entry.getImage()));
				det = new Swallow.UserDetail(entry.getUserID(),
						System.currentTimeMillis(), userName != null ? userName
								: entry.getUserName(),
						profile != null ? profile : entry.getProfile(),
						imageFileID != null ? imageFileID : entry.getImage(),
						email, web, twitter, gcm, apns, observeTagIDs,
						observeMention);
			} else {
				list.add(entry);
			}
		}
		
		dummyUser = list;
		return det;
	}

	@Override
	public Message[] findMessage(Integer startIndex, Integer endIndex,
			Long fromTime, Long toTime, Integer[] postIDs,
			Integer[] postedUserIDs, Integer[] tagIDs, Integer[] replyPostIDs,
			Integer[] destUserIDs, String messagePattern,
			Boolean hasAttachment, Boolean isEnquete, Boolean convertToKana) {
		return dummyMessage.toArray(new Swallow.Message[0]);
	}

	@Override
	public Message createMessage(String message, String[] attributes,
			Integer[] fileIDs, Integer[] replyPostIDs, Integer[] tagIDs,
			Integer[] destUserIDs, String[] enquetes, Integer overwritePostID) {
		Swallow.Message newm = new Swallow.Message(1 + dummyMessage.size(),
				System.currentTimeMillis(), 5, message, 0, attributes, fileIDs,
				tagIDs, replyPostIDs, destUserIDs, enquetes);
		dummyMessage.add(newm);
		return newm;
	}

	@Override
	public File[] findFile(Integer startIndex, Integer endIndex, Long fromTime,
			Long toTime, Integer[] fileIDs, Integer[] tagIDs,
			String fileNamePattern, String fileTypePattern) {
		return dummyFile.toArray(new Swallow.File[0]);
	}

	@Override
	public byte[] getFile(Integer fileID) {
		return fileEntity.get(fileID);
	}

	@Override
	public byte[] getThumbnail(Integer fileID, Integer width, Integer height) {
		File f = findFile(null, null, null, null, new Integer[] { fileID },
				null, null, null)[0];
		if (f.getFileType().startsWith("image/")) {
			return fileEntity.get(fileID);
		} else {
			return null;
		}
	}

	@Override
	public File createFile(String fileName, String fileType, Integer[] tagIDs,
			Integer[] folderContent, Integer overwriteFileID, byte[] fileData) {
		Swallow.File newf = new Swallow.File(1 + dummyFile.size(),
				System.currentTimeMillis(), fileName, fileType, tagIDs,
				folderContent);
		fileEntity.put(1 + dummyFile.size(), fileData);
		dummyFile.add(newf);
		return newf;
	}

	@Override
	public Tag[] findTag(Integer startIndex, Integer endIndex, Long fromTime,
			Long toTime, Integer[] tagIDs, Integer minPostNum,
			Integer maxPostNum, String tagNamePattern) {
		return dummyTag.toArray(new Swallow.Tag[0]);
	}

	@Override
	public Tag createTag(String tagName) {
		Swallow.Tag newt = new Swallow.Tag(1 + dummyTag.size(),
				System.currentTimeMillis(), tagName, 0);
		dummyTag.add(newt);
		return newt;
	}

	@Override
	public Favorite[] findFavorite(Integer startIndex, Integer endIndex,
			Long fromTime, Long toTime, Integer minFavNum, Integer maxFavNum,
			Integer[] userIDs, Integer[] postIDs) {
		return dummyFavorite.toArray(new Swallow.Favorite[0]);
	}

	@Override
	public Favorite createFavorite(Integer postID, Integer favNum) {
		Swallow.Favorite fav = new Swallow.Favorite(5, postID,
				System.currentTimeMillis(), favNum);
		dummyFavorite.add(fav);
		return fav;
	}

	@Override
	public Answer[] findAnswer(Integer startIndex, Integer endIndex,
			Long fromTime, Long toTime, Integer[] userIDs, Integer[] postIDs) {
		return dummyAnswer.toArray(new Swallow.Answer[0]);
	}

	@Override
	public Answer createAnswer(Integer postID, String answer) {
		ArrayList<Swallow.Answer> list = new ArrayList<Swallow.Answer>();
		
		Swallow.Answer newa = null;
		for (Swallow.Answer entry : dummyAnswer) {
			if (entry.getUserID() == 5) {
				newa = new Swallow.Answer(5, postID,
						System.currentTimeMillis(), answer);
				list.add(newa);
			} else {
				list.add(entry);
			}
		}
		
		dummyAnswer = list;
		return newa;
	}

	@Override
	public Received[] findReceived(Integer startIndex, Integer endIndex,
			Long fromTime, Long toTime, Integer[] userIDs, Integer[] postIDs) {
		return dummyReceived.toArray(new Swallow.Received[0]);
	}

	@Override
	public Received createReceived(Integer postID) {
		ArrayList<Swallow.Received> list = new ArrayList<Swallow.Received>();
		
		Swallow.Received newr = null;
		for (Swallow.Received entry : dummyReceived) {
			if (entry.getUserID() == 5) {
				newr = new Swallow.Received(5, postID,
						System.currentTimeMillis());
				list.add(newr);
			} else {
				list.add(entry);
			}
		}
		
		dummyReceived = list;
		return newr;
	}
}
